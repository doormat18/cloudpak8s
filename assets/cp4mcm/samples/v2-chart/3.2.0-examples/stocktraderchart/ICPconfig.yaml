# Default values for the strongSwan IPsec VPN service Helm chart

# validate: The level of parameter validation to be run against the ipsec.conf data stored in the config map.
#   off     - No parameter validation of the ipsec.conf data
#   simple  - Basic parameter validation, such as checking whether values are set to what is allowed for that option
#   strict  - Parameter validation based on known values required to run stongSwan in a Kubernetes cluster
validate: strict

# (Optional) overRideIpsecConf: If you have an existing ipsec.conf file that you want to use,
# remove the curly brackets and add the contents of your file. The file contents must be indented.
#
# Example:
#   overRideIpsecConf: |
#     <contents of ipsec.conf>
#
# NOTE: If you use your own file, any values for the ipsec, local, and remote sections are not used.
# NOTE: Instead of overriding the entire ipsec.conf file, one or more individual properties can be added using the
#       ipsec.additionalOptions parameter.
overRideIpsecConf: {}

# (Optional) overRideIpsecConf: If you have an existing ipsec.secrets file that you want to use,
# remove the curly brackets and add the contents of your file. The file contents must be indented.
#
# Example:
#   overRideIpsecConf: |
#     <contents of ipsec.secrets>
#
# NOTE: If you use your own file, any values for the preshared section are not used.
overRideIpsecSecrets: {}

# enablePodSNAT: Source Network Address Translation (SNAT) allows pods running in the cluster to communicate with the on-premises
# network over the VPN without exposing the pod subnet range (172.30.0.0/16). SNAT changes the IP address of packets sent by the pod
# application from the pod subnet to the private IP address of the worker node on which the pod is running.
#   true  = Enable SNAT
#   false = Disable SNAT
#   auto  = Automatically enable SNAT if the pod IP subnet (172.30.0.0/16) is not listed in local subnets
enablePodSNAT: auto

# (Optional) localSubnetNAT: Network Address Translation (NAT) for subnets provides a workaround for subnet conflicts
# between the local and on-premises networks. You can use NAT to remap the cluster's private local IP subnets,
# the pod subnet (172.30.0.0/16), or the pod service subnet (172.21.0.0/16) to a different private subnet
# so that the VPN tunnel sees remapped IP subnets instead of the original subnets.
# Remapping happens before the packets are sent over the VPN tunnel as well as after the packets arrive from the VPN tunnel.
# You can expose both remapped and non-remapped subnets at the same time over the VPN.
#
#  Examples:
#   localSubnetNAT: 10.171.42.0/25=10.10.10.0/25
#       --OR--
#   localSubnetNAT: |-
#     10.171.42.17/32=10.10.10.2/32
#     10.171.42.29/32=10.10.10.3/32
#     10.171.42.46/32=10.10.10.4/32
#
# - The first example remaps 1-to-1: all of the IP addresses in the 10.171.42.0/25 subnet are mapped over to 10.10.10.0/25
# - The second example only remaps three IP addresses: 10.171.42.17, 10.171.42.29, and 10.171.42.46 are mapped over to
#   10.10.10.2, 10.10.10.3, and 10.10.10.4 respectively.
#
# If you use this setting, the local subnet that is exposed over the VPN connection is the "outside" subnet that the "internal" subnet is
# being mapped to.
localSubnetNAT:

# (Optional) loadBalancerIp: The portable public IP address that you want to use for the strongSwan VPN service.
#   If this field is set, you must use a public portable IP address from a subnet assigned to this cluster.
#   If this field is not set, the cloud provider uses a free public IP address.
#
# If the VPN connection is initiated from the on-premises gateway (ipsec.auto is set to 'add'),
# this property allows a persistent public IP address to be configured on the on-premises gateway for the cluster.
loadBalancerIP:

# (Optional) nodeSelector: To limit which nodes the Strongswan VPN pod deploys to, add the IP address
# of a specific worker node or a worker node label. The deployment spec for the VPN pod will update
# with this value for the nodeSelector.
#
#  Examples:
#   nodeSelector:
#     kubernetes.io/hostname: 10.184.110.141
#       --OR--
#   nodeSelector:
#     strongswan: vpn
#
# - The first example restricts the VPN pod to running on that worker node only. If the VPN pod is restricted to a
#   single node and that node is not available, the VPN will be down.
# - The second example restricts the VPN to running on any worker nodes with that label.
#   You can use any node label, but it is recommended to use: 'strongswan: <release name>'
#   so that different worker nodes can be used with different deployments of this chart.
#
# If the VPN connection is initiated by the cluster (ipsec.auto is set to 'start'), this property can be used
# to limit the source IP addresses of the VPN connection that is observed by the on-premises gateway.
nodeSelector:

# (Optional) tolerations: To allow the strongSwan route DaemonSet to run on worker nodes that are tainted, add tolerations.
#
#  Examples:
#   tolerations:
#     - operator: Exists
#       --OR--
#   tolerations:
#     - key: dedicated
#       operator: "Equal"
#       value: "master"
#       effect: "NoSchedule"
#     - key: dedicated
#       operator: "Equal"
#       value: "proxy"
#       effect: "NoSchedule"
#
# - The first example allows the route daemon to run on all worker nodes. Taints are essentially ignored.
# - The second example allows the route daemon to run on worker nodes that have 'dedicated="master"' or
#   the 'dedicated="edge"' taints.
#
# NOTE: Do not force the route daemon to run on tainted worker nodes unless routes need to be added on those worker nodes.
tolerations: []

# ipsec: ipsec.conf values that are used for the deployment
# For further descriptions of each of these properties, see https://wiki.strongswan.org/projects/strongswan/wiki/IpsecConf
ipsec:

  # ipsec.keyexchange: If your on-premises VPN tunnel endpoint does not support ikev2 as a protocol for initializing the connection,
  # change this value to 'ikev1' or 'ike'.
  keyexchange: ikev2

  # (Optional) ipsec.esp: The list of ESP encryption/authentication algorithms your on-premises VPN tunnel
  # endpoint uses for the connection.
  #   Old chart (1.0) default value: aes128-sha1-modp1024
  #   New chart (1.1+) default value:
  #
  # If you leave this field blank, the default strongSwan algorithms aes128-sha1,3des-sha1 are used for the connection.
  esp: aes128-sha1-modp1024

  # (Optional) ipsec.ike: The list of IKE/ISAKMP SA encryption/authentication algorithms your on-premises VPN tunnel
  # endpoint uses for the connection.
  #   Old chart (1.0) default value:  aes128-sha1-modp1024
  #   New chart (1.1+) default value:
  #
  # If you leave this field blank, the default strongSwan algorithms aes128-sha1-modp2048,3des-sha1-modp1536 are used for the connection.
  ike: aes128-sha1-modp1024

  # ipsec.auto: Which side of the VPN connection initiates the VPN connection.
  #   start - Cluster initiates the VPN connection
  #   add   - Cluster listens for the incoming VPN connection
  auto: start

  # ipsec.closeaction: The action to take if the remote peer unexpectedly closes a CHILD_SA. If the remote peer uses reauthentication
  # or uniqueids checking, do not define a close action because the checks might unintentionally trigger the close action.
  #   none    - No action is performed
  #   restart - Triggers an attempt to renegotiate the connection
  closeaction: restart

  # ipsec.dpdaction: The action to take if the remote peer does not respond. The Dead Peer Detection protocol (DPD, RFC 3706)
  # is used to check the liveliness of the IPsec peer by periodically sending 'R_U_THERE' notification messages (IKEv1)
  # or empty 'INFORMATIONAL' messages (IKEv2).
  #   none    - DPD is not activated and no action is performed
  #   clear   - Activates DPD and closes the connection with no further actions taken
  #   hold    - Activates DPD and installs a trap policy to catch matching traffic and renegotiate the connection on demand
  #   restart - Activates DPD and immediately triggers an attempt to renegotiate the connection
  dpdaction: restart

  # ipsec.ikelifetime: How long an IKE SA connection lasts, from negotiation to expiry.
  #   Seconds - an integer followed by s ('15s')
  #   Minutes - an integer or decimal followed by m ('2.5m')
  #   Hours   - an integer or decimal followed by h ('3h', maximum 24h)
  #   Days    - an integer or decimal followed by d ('1d')
  ikelifetime: 3h

  # ipsec.keyingtries: How many attempts are made to negotiate an IPsec SA or IKE SA connection or a replacement
  # for a connection before giving up. Accepted values are positive integers or '%forever' for unlimited attempts.
  keyingtries: "%forever"

  # lifetime: How long an IPsec SA connection lasts, from negotiation to expiry.
  # See 'ipsec.ikelifetime' above for accepted values.
  lifetime: 1h

  # ipsec.margintime: How long before the expiry of an IPsec SA or IKE SA connection rekeying should begin. This margin time
  # for negotation ensures that the replacement key and connection are ready before the previous connection expires.
  margintime: 9m

  # (Optional) additionalOptions: Additional ipsec options into the default ipsec.conf that is used for the deployment.
  # For a list and description of all possible ipsec.conf properties, see https://wiki.strongswan.org/projects/strongswan/wiki/IpsecConf
  #
  # Example:
  #   additionalOptions: |-
  #     dpddelay=30s
  #     dpdtimeout=150s
  additionalOptions: {}

# NOTE: The local properties listed here are mapped into "left*" properties in the generated ipsec.conf
local:

  # local.subnet: The list of cluster subnet CIDRs to expose over the VPN connection to the on-premises network.
  # This list can include the following subnets:
  #   The Kubernetes pod subnet CIDR     - 172.30.0.0/16
  #   The Kubernetes service subnet CIDR - 172.21.0.0/16
  #   If your applications are exposed by a NodePort service on the private network, the worker node's private subnet CIDR
  #   If you have applications exposed by LoadBalancer services on the private network, the cluster's private or
  #   user-managed subnet CIDRs
  subnet: 10.0.0.0/24

  # local.id: The string identifier for the local Kubernetes cluster side your VPN tunnel endpoint uses for the connection.
  id: on-prem

# NOTE: The remote properties listed here are mapped into "right*" properties in the generated ipsec.conf
remote:

  # remote.gateway: The public IP address for the on-premises VPN gateway.
  # When ipsec.auto is set to 'start', this value is required.
  gateway: 169.60.206.74

  # remote.subnet: The list of on-premises private subnet CIDRs that the Kubernetes clusters are allowed to access.
  subnet: 172.30.0.0/16,172.21.0.0/16

  # remote.id: The string identifier for the remote on-premises side your VPN tunnel endpoint uses for the connection.
  id: ibm-cloud

  # (Optional) remote.privateIPtoPing: the private IP address in the remote subnet that will be used by the
  # Helm test validation programs for VPN ping connectivity tests.
  privateIPtoPing:

preshared:

  # preshared.secret: The pre-shared secret that your on-premises VPN tunnel endpoint gateway uses for the connection.
  # Stored in ipsec.secrets.
  secret: "strongswan-preshared-secret"

